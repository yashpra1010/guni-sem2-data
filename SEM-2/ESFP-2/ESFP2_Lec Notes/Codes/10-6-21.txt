// polymorphism concept we can use in template // function overloading concept. # include<iostream> using namespace std; template <typename T> void sum(T a, T b) { T c; c=a+b; cout<<"\nAddition of two number:"<<c; } template <typename T> void sum(T a, T b, T d) { T mul; mul=a*b*d; cout<<"\nMultiplication of three number:"<<mul; } void abc(float a,float b) { float c; c=a+b; cout<<"\n Addition of two float value:"<<c; } int main() { int a,b,c; cout<<"Enter three value:"; cin>>a>>b>>c; sum(a,b); sum(a,b,c); abc(a,b); return 0; }


#include<iostream> #include<stdio.h> #include<conio.h> using namespace std; template <class T, class P> class Employee { public: T Emp_ID; P Emp_Name; P Emp_Address; Employee(T E_id, P E_name, P E_address) { Emp_ID=E_id; Emp_Name=E_name; Emp_Address=E_address; } void set_Data(T E_id, P E_name, P E_address) { Emp_ID=E_id; Emp_Name=E_name; Emp_Address=E_address; } void display() { cout<<"\n Emp_ID:"<<Emp_ID; cout<<"\n Emp_Name:"<<Emp_Name; cout<<"\n Emp_Address:"<<Emp_Address; } }; int main() { Employee <int,string> ob(1,"Av","dff"); ob.display(); Employee <int,string> ob1(2,"ss","abc"); ob1.display(); ob1.set_Data(1,"Priyanshu","Andheri"); ob1.display(); return 0; }
